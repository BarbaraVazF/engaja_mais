// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client"
  output        = "../app/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @map("_id")
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  students         Student[]
  verificationCode String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Student {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  registeredBy   User       @relation(fields: [registeredById], references: [id])
  registeredById String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  report         Report[]
  requests       Requests[]

  @@map("student")
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String   @db.ObjectId
  content     Bytes
  textContent String
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("report")
}

enum Status {
  PENDING
  DOING
  SUCCESS
  ERROR
}

model Requests {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String   @db.ObjectId
  title     String
  meta      Json
  type      String
  content   String?
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("requests")
}
